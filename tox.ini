[tox]
envlist = py{27,33,34,35,36,py}-{brief,prettyquick,full,custom,benchmark}
toxworkdir={env:TOX_WORK_DIR:.tox}

passenv=
  HOME
  LC_ALL
  COVERAGE_FILE
  PYTHONOPTIMIZE

[testenv]
deps =
    -rrequirements/test.txt
    benchmark: pytest-benchmark==3.0.0
whitelist_externals=
    bash
setenv=
    brief: HYPOTHESIS_PROFILE=speedy
passenv=
    HOME
    TOXENV
commands =
    full: bash scripts/basic-test.sh
    brief: python -m pytest tests/cover/test_testdecorators.py {posargs}
    prettyquick: python -m pytest tests/cover/
    custom: python -m pytest {posargs}
    benchmark: python -m pytest benchmarks

[testenv:quality]
deps=
    -rrequirements/test.txt
commands=
    python -m pytest tests/quality/

[testenv:oldpy27]
basepython=python2.7.3
deps=
    -rrequirements/test.txt
commands=
    python -m pytest tests/cover/

[testenv:py27typing]
basepython=python2.7
deps=
    -rrequirements/test.txt
    -rrequirements/typing.txt
commands=
    python -m pytest tests/cover/

[testenv:unicode]
basepython=python2.7
deps =
  unicode-nazi
setenv=
    UNICODENAZI=true
    PYTHONPATH=.
commands=
    python scripts/unicodechecker.py

[testenv:faker070]
deps =
    -rrequirements/test.txt
commands =
    pip install --no-binary :all: Faker==0.7.0
    python -m pytest tests/fakefactory

[testenv:faker071]
deps =
    -rrequirements/test.txt
commands =
    pip install --no-binary :all: Faker==0.7.1
    python -m pytest tests/fakefactory

[testenv:django18]
commands =
    pip install .[datetime]
    pip install django>=1.8,<1.8.99
    python -m tests.django.manage test tests.django

[testenv:django110]
commands =
    pip install .[datetime]
    pip install --no-binary :all: .[fakefactory]
    pip install django>=1.10,<1.10.99
    python -m tests.django.manage test tests.django

[testenv:django111]
commands =
    pip install .[datetime]
    pip install --no-binary :all: .[fakefactory]
    pip install django>=1.11,<1.11.99
    python -m tests.django.manage test tests.django

[testenv:nose]
deps =
    nose
commands=
    nosetests tests/cover/test_testdecorators.py

[testenv:pytest30]
deps =
    -rrequirements/test.txt
commands=
    python -m pytest tests/pytest tests/cover/test_testdecorators.py

[testenv:pytest28]
deps =
    -rrequirements/test.txt
commands=
    python -m pytest tests/pytest tests/cover/test_testdecorators.py

[testenv:docs]
deps = sphinx
commands=sphinx-build -W -b html -d docs/_build/doctrees   docs docs/_build/html


[testenv:coverage]
deps =
    -rrequirements/test.txt
    -rrequirements/coverage.txt
setenv=
    HYPOTHESIS_INTERNAL_BRANCH_CHECK=true
commands =
    python -m coverage --version
    python -m coverage debug sys
    python -m coverage run --rcfile=.coveragerc -m pytest -n0 --strict tests/cover tests/datetime tests/py3 tests/numpy --maxfail=1 --ff {posargs}
    python -m coverage report -m --fail-under=100 --show-missing
    python scripts/validate_branch_check.py

[testenv:examples3]
setenv=
    HYPOTHESIS_STRICT_MODE=true
deps=
    -rrequirements/test.txt
commands=
    python -m pytest examples


[testenv:examples2]
setenv=
    HYPOTHESIS_STRICT_MODE=true
basepython=python2.7
deps=
    -rrequirements/test.txt
commands=
    python -m pytest examples

[pytest]
addopts=--strict --tb=short -vv -p pytester --runpytest=subprocess --durations=20 -n 2
