[tox]
envlist = py{36,37,38,39}-{brief,prettyquick,full,custom}
toxworkdir={env:TOX_WORK_DIR:.tox}

[testenv]
deps =
    -r../requirements/test.txt
whitelist_externals=
    bash
passenv=
    HOME
    LC_ALL
    COVERAGE_FILE
    TOXENV
setenv=
    brief: HYPOTHESIS_PROFILE=speedy
commands =
    full: bash scripts/basic-test.sh
    brief: python -m pytest tests/cover/test_testdecorators.py {posargs}
    prettyquick: python -m pytest tests/cover/
    custom: python -m pytest {posargs}

[testenv:quality]
deps=
    -r../requirements/test.txt
commands=
    python -m pytest tests/quality/ -n2

[testenv:pandas25]
deps =
    -r../requirements/test.txt
    pandas~=0.25.0
commands =
    python -m pytest tests/pandas -n2

[testenv:pandas100]
deps =
    -r../requirements/test.txt
    pandas~=1.0.0
commands =
    python -m pytest tests/pandas -n2

[testenv:pandas111]
deps =
    -r../requirements/test.txt
    pandas~=1.1.1
commands =
    python -m pytest tests/pandas -n2

[testenv:django22]
commands =
    pip install .[pytz]
    pip install django~=2.2.0
    python -m tests.django.manage test tests.django

[testenv:django30]
commands =
    pip install .[pytz]
    pip install django~=3.0.10
    python -m tests.django.manage test tests.django

[testenv:django31]
commands =
    pip install .[pytz]
    pip install django~=3.1.1
    python -m tests.django.manage test tests.django

[testenv:nose]
deps =
    nose
commands=
    nosetests tests/cover/test_testdecorators.py

[testenv:pytest43]
deps =
    -r../requirements/test.txt
commands=
    pip install pytest==4.3 pytest-xdist==1.25 pytest-forked==0.2
    python -m pytest tests/pytest tests/cover/test_testdecorators.py


[testenv:coverage]
deps =
    -r../requirements/test.txt
    -r../requirements/coverage.txt
whitelist_externals=
    rm
setenv=
    HYPOTHESIS_INTERNAL_COVERAGE=true
commands =
    rm -f branch-check
    python -m coverage --version
    python -m coverage debug sys
    python -m coverage run --rcfile=.coveragerc -m pytest -n0 --strict tests/cover tests/conjecture tests/datetime tests/numpy tests/pandas tests/lark --ff {posargs}
    python -m coverage report -m --fail-under=100 --show-missing --skip-covered
    python scripts/validate_branch_check.py


[testenv:conjecture-coverage]
deps =
    -r../requirements/test.txt
    -r../requirements/coverage.txt
whitelist_externals=
    rm
setenv=
    HYPOTHESIS_INTERNAL_COVERAGE=true
commands =
    python -m coverage run --rcfile=.coveragerc --source=hypothesis.internal.conjecture -m pytest -n0 --strict tests/conjecture
    python -m coverage report -m --fail-under=100 --show-missing --skip-covered


[testenv:examples3]
deps=
    -r../requirements/test.txt
commands=
    python -m pytest examples
