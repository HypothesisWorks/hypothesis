[tox]
envlist = py{27,34,35,36,37,py}-{brief,prettyquick,full,custom}
toxworkdir={env:TOX_WORK_DIR:.tox}

[testenv]
deps =
    -r../requirements/test.txt
whitelist_externals=
    bash
passenv=
    HOME
    LC_ALL
    COVERAGE_FILE
    TOXENV
setenv=
    brief: HYPOTHESIS_PROFILE=speedy
commands =
    full: bash ../scripts/basic-test.sh
    brief: python -m pytest tests/cover/test_testdecorators.py {posargs}
    prettyquick: python -m pytest tests/cover/
    custom: python -m pytest {posargs}

[testenv:quality]
deps=
    -r../requirements/test.txt
commands=
    python -m pytest tests/quality/ -n2


[testenv:quality2]
basepython=python2.7
deps=
    -r../requirements/test.txt
commands=
    python -m pytest tests/quality/

[testenv:oldpy27]
basepython=python2.7.3
deps=
    -r../requirements/test.txt
commands=
    python -m pytest tests/cover/ -n2

[testenv:py27typing]
basepython=python2.7
deps=
    -r../requirements/test.txt
    -r../requirements/typing.txt
commands=
    python -m pytest tests/cover/ -n2

[testenv:unicode]
basepython=python2.7
deps =
  unicode-nazi
setenv=
    UNICODENAZI=true
    PYTHONPATH=.
commands=
    python ../scripts/unicodechecker.py

[testenv:faker070]
deps =
    -r../requirements/test.txt
commands =
    pip install --no-binary :all: Faker==0.7.0
    python -m pytest tests/fakefactory

[testenv:faker-latest]
deps =
    -r../requirements/test.txt
commands =
    pip install --no-binary :all: Faker
    python -m pytest tests/fakefactory


[testenv:pandas19]
deps =
    -r../requirements/test.txt
    pandas~=0.19.2
commands =
    python -m pytest tests/pandas -n2

[testenv:pandas20]
deps =
    -r../requirements/test.txt
    pandas~=0.20.3
commands =
    python -m pytest tests/pandas -n2

[testenv:pandas21]
deps =
    -r../requirements/test.txt
    pandas~=0.21.0
commands =
    python -m pytest tests/pandas -n2

[testenv:pandas22]
deps =
    -r../requirements/test.txt
    pandas~=0.22.0
commands =
    python -m pytest tests/pandas -n2


[testenv:django111]
commands =
    pip install .[pytz]
    pip install django~=1.11.7
    python -m tests.django.manage test tests.django

[testenv:django20]
basepython=python3
commands =
    pip install .[pytz]
    pip install django~=2.0.1
    python -m tests.django.manage test tests.django

[testenv:nose]
deps =
    nose
commands=
    nosetests tests/cover/test_testdecorators.py

[testenv:pytest30]
deps =
    -r../requirements/test.txt
commands=
    python -m pytest tests/pytest tests/cover/test_testdecorators.py

[testenv:pytest28]
deps =
    -r../requirements/test.txt
commands=
    python -m pytest tests/pytest tests/cover/test_testdecorators.py


[testenv:coverage]
deps =
    -r../requirements/test.txt
    -r../requirements/coverage.txt
setenv=
    HYPOTHESIS_INTERNAL_COVERAGE=true
commands =
    python -m coverage --version
    python -m coverage debug sys
    python -m coverage run --rcfile=.coveragerc -m pytest -n0 --strict tests/cover tests/datetime tests/py3 tests/numpy tests/pandas --maxfail=1 --ff {posargs}
    python -m coverage report -m --fail-under=100 --show-missing
    python ../scripts/validate_branch_check.py


[testenv:pure-tracer]
deps =
    -r../requirements/test.txt
setenv=
    HYPOTHESIS_FORCE_PURE_TRACER=true
commands =
    python -m pytest tests/cover tests/nocover/test_coverage.py -n 0 {posargs}


[testenv:pypy-with-tracer]
setenv=
    HYPOTHESIS_PROFILE=with_coverage
basepython=pypy
deps =
    -r../requirements/test.txt
commands =
    python -m pytest tests/cover/test_testdecorators.py tests/nocover/test_coverage.py -n 0 {posargs}


[testenv:examples3]
deps=
    -r../requirements/test.txt
commands=
    python -m pytest examples


[testenv:examples2]
basepython=python2.7
deps=
    -r../requirements/test.txt
commands=
    python -m pytest examples

[pytest]
addopts=--strict --tb=native -p pytester --runpytest=subprocess --durations=20

[flake8]
exclude =
    compat.py,
    src/hypothesis/vendor/,
    test_reflection.py,
    test_imports.py,
    tests/py2,
    test_lambda_formatting.py
ignore = D1,D205,D209,D213,D400,D401,D999
